class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def convert_to_bst(root):
    # Step 1: Traverse the binary tree and store all the node values in a list
    def inorder_traversal(node):
        if node is None:
            return []
        return inorder_traversal(node.left) + [node.value] + inorder_traversal(node.right)

    values = inorder_traversal(root)

    # Step 2: Sort the values
    values.sort()

    # Step 3: Build a new binary search tree using the sorted values
    def build_bst(start, end):
        if start > end:
            return None

        mid = (start + end) // 2
        node = TreeNode(values[mid])

        node.left = build_bst(start, mid - 1)
        node.right = build_bst(mid + 1, end)

        return node

    return build_bst(0, len(values) - 1)


# Example usage
# Create the binary tree from the input
root = TreeNode(10)
root.left = TreeNode(2)
root.right = TreeNode(7)
root.left.left = TreeNode(8)
root.left.right = TreeNode(4)

# Convert the binary tree to a binary search tree
bst_root = convert_to_bst(root)

# Print the resulting binary search tree
def print_bst_inorder(node):
    if node is None:
        return
    print_bst_inorder(node.left)
    print(node.value)
    print_bst_inorder(node.right)

print_bst_inorder(bst_root)
2
4
7
8
10
