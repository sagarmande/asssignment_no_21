
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.next = None


def connect_nodes_at_same_level(root):
    if root is None:
        return

    # Create a queue for level order traversal
    queue = [root]

    while queue:
        # Get the size of the current level
        level_size = len(queue)

        # Process all nodes in the current level
        for i in range(level_size):
            # Dequeue the front node
            node = queue.pop(0)

            # Set the next pointer of the current node
            if i < level_size - 1:
                node.next = queue[0]

            # Enqueue the left and right children, if they exist
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        # Set the next pointer of the last node in the current level to None
        if queue:
            queue[-1].next = None


# Example usage
# Create the binary tree from the input
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

# Connect nodes at the same level
connect_nodes_at_same_level(root)

# Print the next pointers to visualize the connections
current = root
while current:
    level_start = current
    while current:
        print(current.value, end=" â†’ ")
        current = current.next
    print("-1")
    current = level_start.left


